{
  "name": "jdataview",
  "version": "2.4.6",
  "description": "A unique way to work with a binary file in the browser and the server.",
  "keywords": [
    "buffer",
    "binary",
    "data",
    "file",
    "dataview",
    "read",
    "write",
    "manipulation"
  ],
  "homepage": "http://jDataView.github.io/",
  "author": {
    "name": "Vjeux",
    "email": "vjeuxx@gmail.com",
    "url": "http://blog.vjeux.com/"
  },
  "contributors": [
    {
      "name": "Vjeux",
      "email": "vjeuxx@gmail.com",
      "url": "http://blog.vjeux.com/"
    },
    {
      "name": "RReverser",
      "email": "me@rreverser.com",
      "url": "http://rreverser.com"
    }
  ],
  "files": [
    "dist/node/jdataview.js"
  ],
  "main": "dist/node/jdataview.js",
  "scripts": {
    "test": "grunt"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jDataView/jDataView.git"
  },
  "devDependencies": {
    "grunt": "~0.4.2",
    "grunt-contrib-uglify": "~0.3.2",
    "grunt-contrib-jshint": "~0.7.2",
    "load-grunt-config": "*",
    "grunt-mocha-test": "~0.7.0",
    "karma": "~0.10.9",
    "karma-firefox-launcher": "~0.1.3",
    "karma-chrome-launcher": "~0.1.2",
    "karma-phantomjs-launcher": "~0.1.2",
    "karma-ie-launcher": "~0.1.1",
    "karma-mocha": "~0.1.1",
    "chai": "~1.9.0",
    "karma-chai": "~0.1.0",
    "grunt-karma": "~0.6.2",
    "grunt-contrib-watch": "~0.5.3",
    "grunt-bump": "0.0.13",
    "npm": "~1.4.4",
    "grunt-concat-sourcemap": "~0.4.1",
    "grunt-compare-size": "~0.4.0",
    "gzip-js": "~0.3.2",
    "jshint-stylish": "~0.1.5",
    "grunt-lintspaces": "~0.4.1",
    "grunt-contrib-clean": "~0.5.0"
  },
  "licenses": [
    {
      "type": "WTFPL",
      "url": "http://sam.zoy.org/wtfpl/"
    }
  ],
  "readme": "[![Build Status](https://travis-ci.org/jDataView/jDataView.png?branch=master)](https://travis-ci.org/jDataView/jDataView) <a href=\"http://blog.vjeux.com/2011/javascript/jdataview-read-binary-file.html\">jDataView</a> - A unique way to work with a binary file in JavaScript.\n================================\n\njDataView provides convenient way to read and/or modify binary data in all the browsers. It follows the [DataView Specification](http://www.khronos.org/registry/typedarray/specs/latest/#8) and even extends it for a more practical use.\n\nExplanation\n===========\n\nThere are three ways to read a binary file from the browser.\n\n* The first one is to download the file through XHR with [charset=x-user-defined](https://developer.mozilla.org/en/using_xmlhttprequest#Receiving_binary_data). You get the file as a **String**, convert it to byte **Array** and you have to rewrite all the decoding and encoding functions (getUint16, getFloat32, ...). All the browsers support this.\n\n* Then browsers that implemented **Canvas** also added **CanvasPixelArray** as part of **ImageData**. It is fast byte array that is created and used internally by `<canvas />` element for manipulating low-level image data. We can create such host element and use it as factory for our own instances of this array.\n\n* Then browsers that implemented **WebGL** added **ArrayBuffer**. It is a plain buffer that can be read with views called **TypedArrays** (Int32Array, Float64Array, ...). You can use them to decode the file but this is not very handy. It has big drawback, it can't read non-aligned data (but we can actually hack that). So they replaced **CanvasPixelArray** with **Uint8ClampedArray** (same as Uint8Array, but cuts off numbers outside 0..255 range).\n\n* A new revision of the specification added **DataViews**. It is a view around your buffer that can read/write arbitrary data types directly through functions: getUint32, getFloat64 ...\n\nAnd one way to read a binary file from the server.\n\n* **NodeJS Buffers**. They appeared in [Node 0.4.0](http://nodejs.org/docs/v0.4.0/api/buffers.html). [Node 0.5.0](http://nodejs.org/docs/v0.5.0/api/buffers.html) added a DataView-like API. And [Node 0.6.0](http://nodejs.org/docs/v0.6.0/api/buffers.html) changed the API naming convention.\n\n**jDataView** provides the **DataView API** with own convenient extensions using the best available option between Arrays, TypedArrays, NodeJS Buffers and DataViews.\n\nDocumentation\n=============\n\n  * API\n    * [jDataView constructor](https://github.com/jDataView/jDataView/wiki/jDataView-constructor)\n    * [DataView Specification](http://www.khronos.org/registry/typedarray/specs/latest/#8)\n    * Extended Specification\n      * [Operation control](https://github.com/jDataView/jDataView/wiki/Operation-control)\n      * [writeXXX methods](https://github.com/jDataView/jDataView/wiki/writeXXX-methods)\n      * [Strings and Blobs](https://github.com/jDataView/jDataView/wiki/Strings-and-Blobs)\n      * [64-bit integers](https://github.com/jDataView/jDataView/wiki/64-bit-integers)\n      * [Bitfields](https://github.com/jDataView/jDataView/wiki/Bitfields)\n      * [Internal utilities](https://github.com/jDataView/jDataView/wiki/Internal-utilities)\n  * [Example](https://github.com/jDataView/jDataView/wiki/Example)\n  * [Changelog](https://github.com/jDataView/jDataView/blob/master/CHANGELOG.md)\n\nAdvanced usage ([jBinary](https://github.com/jDataView/jBinary))\n========================\n\nFor complicated binary structures, it may be hard enough to use only low-level get/set operations for parsing,\nprocessing and writing data.\n\nIn addition, most likely you might need convenient I/O methods for retrieving data from external sources such like\nlocal files (using File API or from Node.js), remote files (via HTTP(S)), data-URIs, Node.js streams etc. as well\nas for displaying generated content to user on webpage in image/video/audio/... containers\nor even as simple download link.\n\nIf you faced any of these problems, you might want to check out new [jBinary](https://github.com/jDataView/jBinary)\nlibrary that works on top of **jDataView** and allows to operate with binary data in structured and convenient way.\n\nDemos\n=====\n\n* [HTTP Live Streaming realtime converter and player demo](http://rreverser.github.io/mpegts/) implemented using [jBinary](https://github.com/jDataView/jBinary) data structures.\n[![Screenshot](http://rreverser.github.io/mpegts/screenshot.png?)](http://rreverser.github.io/mpegts/)\n\n* A [World of Warcraft Model Viewer](http://jdataview.github.io/jsWoWModelViewer/). It uses [jDataView](https://github.com/jDataView/jDataView)+[jBinary](https://github.com/jDataView/jBinary) to read the binary file and then WebGL to display it.\n[![Screenshot](http://jdataview.github.io/jsWoWModelViewer/images/modelviewer.png)](http://jdataview.github.io/jsWoWModelViewer/)\n\n* A [PhotoSynth WebGL Viewer](http://www.visual-experiments.com/2011/04/05/photosynth-webgl-viewer/) by Visual Experiments. It uses jDataView to read the binary file and then WebGL to display it.\n[![Screenshot](http://i.imgur.com/HRHXo.jpg)](http://www.visual-experiments.com/2011/04/05/photosynth-webgl-viewer/)\n\n* A [simple tar viewer](http://jdataview.github.io/jDataView/untar/). It is a \"Hello World\" demo of how easy it is to use the library.\n\n* JavaScript [TrueTypeFont library demo](http://ynakajima.github.io/ttf.js/demo/glyflist/) which uses jDataView to read and display glyphs from TrueType file.\n\n* [jBinary.Repo](https://jdataview.github.io/jBinary.Repo) ready-to-use typesets and corresponding demos of using\n[jDataView](https://github.com/jDataView/jDataView)+[jBinary](https://github.com/jDataView/jBinary)\nfor reading popular file formats like\n[GZIP archives](https://jdataview.github.io/jBinary.Repo/demo/#gzip),\n[TAR archives](https://jdataview.github.io/jBinary.Repo/demo/#tar),\n[ICO images](https://jdataview.github.io/jBinary.Repo/demo/#ico),\n[BMP images](https://jdataview.github.io/jBinary.Repo/demo/#bmp),\n[MP3 tags](https://jdataview.github.io/jBinary.Repo/demo/#mp3)\netc.\n\n* [Talking image](http://hacksparrow.github.io/talking-image/) - animation and audio in one package powered by\nHTML5 Audio, [jDataView](https://github.com/jDataView/jDataView) and [jBinary](https://github.com/jDataView/jBinary).\n\nPlease tell us if you made something with jDataView :)\n\nLicense\n=======\n\njDataView is issued under [Do What The Fuck You Want To Public License](http://sam.zoy.org/wtfpl/) :)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jDataView/jDataView/issues"
  },
  "_id": "jdataview@2.4.6",
  "_shasum": "41aa5c75f9794f11605883d29bdaaf0998b3552b",
  "_from": "jdataview@~2.4.4",
  "_resolved": "https://registry.npmjs.org/jdataview/-/jdataview-2.4.6.tgz"
}
