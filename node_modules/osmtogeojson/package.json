{
  "name": "osmtogeojson",
  "version": "2.0.5",
  "description": "convert OSM to geojson",
  "main": "index.js",
  "scripts": {
    "pretest": "npm ls --depth=Infinity > /dev/null",
    "test": "npm run test-lib && npm run test-cli",
    "test-lib": "mocha -R spec",
    "test-cli": "node test-cli/cli.test.js | faucet"
  },
  "bin": {
    "osmtogeojson": "osmtogeojson"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/tyrasd/osmtogeojson.git"
  },
  "keywords": [
    "openstreetmap",
    "geojson"
  ],
  "author": {
    "name": "Martin Raifer"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/tyrasd/osmtogeojson/issues"
  },
  "dependencies": {
    "geojson-rewind": "0.1.0",
    "xmldom": "~0.1.16",
    "optimist": "~0.3.5",
    "concat-stream": "~1.0.1",
    "htmlparser2": "3.5.1",
    "JSONStream": "0.8.0"
  },
  "devDependencies": {
    "expect.js": "~0.2.0",
    "mocha": "~1.12.0",
    "tape": "~2.10.2",
    "faucet": "~0.0.1"
  },
  "engines": {
    "node": ">=0.5"
  },
  "readme": "osmtogeojson\n============\n\nConverts [OSM](http://openstreetmap.org) [data](http://wiki.openstreetmap.org/wiki/OSM_XML) to [GeoJSON](http://www.geojson.org/). Try the [demo](http://tyrasd.github.io/osmtogeojson/)!\n\n* stable\n* real OSM [polygon detection](https://wiki.openstreetmap.org/wiki/Overpass_turbo/Polygon_Features)\n* real OSM multipolygon support\n* well [tested](https://github.com/tyrasd/osmtogeojson/tree/gh-pages/test/) and proven\n* ~~fast~~ not slow\n\nThis code is used in and maintained by the [overpass turbo](http://github.com/tyrasd/overpass-ide) project.\n\n[![Build Status](https://secure.travis-ci.org/tyrasd/osmtogeojson.png)](https://travis-ci.org/tyrasd/osmtogeojson)\n\nUsage\n-----\n\n* as a **command line tool**:\n  \n        $ npm install -g osmtogeojson\n        $ osmtogeojson file.osm > file.geojson\n  \n  When working with extra large data files (≳ 100 MB) it is recommended to run the programm with a little extra memory to avoid *process out of memory* errors. The easiest way to do this is by running the command as `node <path-to-osmtogeojson>` and setting the `--max_old_space_size=…` parameter to the available memory size in MB (osmtogeojson typically needs about 4-5 times the input data size):\n  \n        $ node --max_old_space_size=8192 `which osmtogeojson` large.osm > large.geojson\n  \n* as a **nodejs library**:\n  \n        $ npm install osmtogeojson\n  \n        var osmtogeojson = require('osmtogeojson');\n        osmtogeojson(osm_data);\n  \n* as a **browser library**:\n  \n        <script src='osmtogeojson.js'></script>\n  \n        osmtogeojson(osm_data);\n\nAPI\n---\n\n### `osmtogeojson( data, options )`\n\nConverts OSM data into GeoJSON.\n\n* `data`: the OSM data. Either as a XML DOM or in [OSM JSON](http://overpass-api.de/output_formats.html#json).\n* `options`: optional. The following options can be used:\n  * `flatProperties`: If true, the resulting GeoJSON feature's properties won't be a structured json object rather than a simple key-value list.\n  * `uninterestingTags`: Either a [blacklist](https://github.com/tyrasd/osmtogeojson/blob/2.0.0/index.js#L14-L24) of tag keys or a callback function. Will be used to decide if a feature is *interesting* enough for its own GeoJSON feature.\n  * `polygonFeatures`: Either a [json object](https://github.com/tyrasd/osmtogeojson/blob/2.0.0/polygon_features.json) or callback function that is used to determine if a closed way should be treated as a Polygon or LineString. [read more](https://wiki.openstreetmap.org/wiki/Overpass_turbo/Polygon_Features)\n\nThe result is a javascript object of GeoJSON data:\n\nGeoJSON\n-------\n\nThe GeoJSON produced by this library will include exactly one GeoJSON-feature for each of the following OSM objects (that is everything that is also visible in overpass turbo's map view):\n\n* all unconnected or [*interesting*](#api) tagged nodes (POIs)\n* all ways (except [*uninteresting*](#api) multipolygon outlines)\n* all multipolygons (simple multipolygons with exactly one closed outer way are present via their outer way)\n\nAll data is given as a FeatureCollection. Each Feature in the collection has an `id` property that is formed from the type and id of the original OSM object (e.g. `node/123`) and has the member `properties` containing the following data:\n\n* `type`: the OSM data type\n* `id`: the OSM id \n* `tags`: a collection of all tags\n* `meta`: metainformaton about the feature (e.g. version, timestamp, user, etc.)\n* `relations`: an array of relations the feature is member of. Each relation is encoded as an object literal containing the following properties: `role` (membership role), `rel` (the relation's id) and `reltags` (contains all tags of the relation)\n* `tainted`: this flag is set when the feature's geometry is incomplete (e.g. missing nodes of a way or missing ways of a multipolygon)\n\nIf the [option](#api) `flatProperties` is set to true, the `properties` object will not contain any nested object literals, but directly provide a concise id, meta data and the tags of the respective OSM object.\n\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/tyrasd/osmtogeojson",
  "_id": "osmtogeojson@2.0.5",
  "_shasum": "cbb22610c4988c7e8ae4907878c9aed9b19cbb32",
  "_from": "osmtogeojson@2.0.5",
  "_resolved": "https://registry.npmjs.org/osmtogeojson/-/osmtogeojson-2.0.5.tgz"
}
